#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');
const socketIo = require('socket.io');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '5000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = socketIo(server);

// List of online users
let onlineUsers = [];
let number=0;
// Get users online
const getUsersOnline = () => {
  return onlineUsers;
};

io.on('connection', (socket) => {
 console.log('a user connected');
  number++;
  io.emit('updateUserCount', number);
  // When user joins, we add them to the list of online users
  socket.on('user joined', (userId) => {
    socket.userId = userId;
    socket.join(userId); // Join room with userId
    onlineUsers.push({ userId, socketId: socket.id });
   // console.log(getUsersOnline().length);
    io.emit('userList', getUsersOnline());
  });
  socket.on('join room', (room) => {
    socket.join(room);
    console.log(`User joined room: ${room}`);
  });

  socket.on('chat message', (data) => {
 //   console.log(`Message from ${data.userId}: ${data.message}`);
    io.to(data.room).emit('chat message', data);
  });

  socket.on('disconnect', () => {
  console.log('user disconnected');
    number--;
    io.emit('updateUserCount', number);
    onlineUsers = onlineUsers.filter(user => user.socketId !== socket.id);
    io.emit('userList', getUsersOnline());
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(val)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'Port ' + addr.port;
  debug('Listening on ' + bind);
}
